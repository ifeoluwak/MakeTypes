"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseEquals = parseEquals;
exports.parseThrows = parseThrows;
var assert = require("assert");
var Context = /** @class */ (function () {
    function Context(fail, prop, msg) {
        this.fail = fail;
        this.prop = prop;
        this.msg = msg;
    }
    Context.prototype.or = function (test, msg) {
        if (!this.fail) {
            return new Context(test(), this.prop, msg);
        }
        else {
            return this;
        }
    };
    return Context;
}());
function equal(expected, actual, prop) {
    if (expected === null || typeof (expected) !== "object") {
        return new Context(expected !== actual, prop, "".concat(expected, " !== ").concat(actual));
    }
    if (Array.isArray(expected)) {
        var ctx = new Context(!Array.isArray(actual), prop, 'Expected an array.')
            .or(function () { return actual.length !== expected.length; }, "Array lengths do not match.");
        if (!ctx.fail) {
            for (var i = 0; i < expected.length; i++) {
                var ctx_1 = equal(expected[i], actual[i], "".concat(prop, "[").concat(i, "]"));
                if (ctx_1.fail) {
                    return ctx_1;
                }
            }
            return new Context(false, prop, '');
        }
        else {
            return ctx;
        }
    }
    else {
        var keys = Object.keys(expected);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var ctx = equal(expected[key], actual[key], "".concat(prop, ".").concat(key));
            if (ctx.fail) {
                return ctx;
            }
        }
        return new Context(false, prop, '');
    }
}
function parseEquals(proxy, s, expected) {
    var d = proxy.Parse(s);
    var ctx = equal(expected, d, 'root');
    assert(!ctx.fail, "Property ".concat(ctx.prop, " does not match: ").concat(ctx.msg));
}
function parseThrows(proxy, s) {
    var threw = false;
    try {
        proxy.Parse(s);
    }
    catch (e) {
        threw = true;
    }
    assert(threw);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUF1REEsa0NBSUM7QUFFRCxrQ0FRQztBQXJFRCwrQkFBaUM7QUFNakM7SUFJRSxpQkFBWSxJQUFhLEVBQUUsSUFBWSxFQUFFLEdBQVc7UUFDbEQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDakIsQ0FBQztJQUNNLG9CQUFFLEdBQVQsVUFBVSxJQUFtQixFQUFFLEdBQVc7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNmLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM3QyxDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7SUFDSCxjQUFDO0FBQUQsQ0FBQyxBQWhCRCxJQWdCQztBQUVELFNBQVMsS0FBSyxDQUFDLFFBQWEsRUFBRSxNQUFXLEVBQUUsSUFBWTtJQUNyRCxJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksT0FBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQ3ZELE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBRSxJQUFJLEVBQUUsVUFBRyxRQUFRLGtCQUFRLE1BQU0sQ0FBRSxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUNELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQzVCLElBQU0sR0FBRyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLENB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